// Code generated by protoc-gen-go.
// source: domains.proto
// DO NOT EDIT!

/*
Package domains is a generated protocol buffer package.

It is generated from these files:
	domains.proto

It has these top-level messages:
	AllBlockedDomainsRequest
	AllBlockedDomainsResult
*/
package domains

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AllBlockedDomainsRequest struct {
}

func (m *AllBlockedDomainsRequest) Reset()                    { *m = AllBlockedDomainsRequest{} }
func (m *AllBlockedDomainsRequest) String() string            { return proto.CompactTextString(m) }
func (*AllBlockedDomainsRequest) ProtoMessage()               {}
func (*AllBlockedDomainsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AllBlockedDomainsResult struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
}

func (m *AllBlockedDomainsResult) Reset()                    { *m = AllBlockedDomainsResult{} }
func (m *AllBlockedDomainsResult) String() string            { return proto.CompactTextString(m) }
func (*AllBlockedDomainsResult) ProtoMessage()               {}
func (*AllBlockedDomainsResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AllBlockedDomainsResult) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func init() {
	proto.RegisterType((*AllBlockedDomainsRequest)(nil), "AllBlockedDomainsRequest")
	proto.RegisterType((*AllBlockedDomainsResult)(nil), "AllBlockedDomainsResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DomainCheck service

type DomainCheckClient interface {
	AllBlockedDomains(ctx context.Context, in *AllBlockedDomainsRequest, opts ...grpc.CallOption) (*AllBlockedDomainsResult, error)
}

type domainCheckClient struct {
	cc *grpc.ClientConn
}

func NewDomainCheckClient(cc *grpc.ClientConn) DomainCheckClient {
	return &domainCheckClient{cc}
}

func (c *domainCheckClient) AllBlockedDomains(ctx context.Context, in *AllBlockedDomainsRequest, opts ...grpc.CallOption) (*AllBlockedDomainsResult, error) {
	out := new(AllBlockedDomainsResult)
	err := grpc.Invoke(ctx, "/DomainCheck/AllBlockedDomains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DomainCheck service

type DomainCheckServer interface {
	AllBlockedDomains(context.Context, *AllBlockedDomainsRequest) (*AllBlockedDomainsResult, error)
}

func RegisterDomainCheckServer(s *grpc.Server, srv DomainCheckServer) {
	s.RegisterService(&_DomainCheck_serviceDesc, srv)
}

func _DomainCheck_AllBlockedDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllBlockedDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainCheckServer).AllBlockedDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DomainCheck/AllBlockedDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainCheckServer).AllBlockedDomains(ctx, req.(*AllBlockedDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DomainCheck_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DomainCheck",
	HandlerType: (*DomainCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllBlockedDomains",
			Handler:    _DomainCheck_AllBlockedDomains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domains.proto",
}

func init() { proto.RegisterFile("domains.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xc9, 0xcf, 0x4d,
	0xcc, 0xcc, 0x2b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe2, 0x92, 0x70, 0xcc, 0xc9,
	0x71, 0xca, 0xc9, 0x4f, 0xce, 0x4e, 0x4d, 0x71, 0x81, 0x48, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16,
	0x97, 0x28, 0x19, 0x73, 0x89, 0x63, 0x91, 0x2b, 0x2e, 0xcd, 0x29, 0x11, 0x92, 0xe0, 0x62, 0x87,
	0x9a, 0x23, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x19, 0x04, 0xe3, 0x1a, 0x85, 0x73, 0x71, 0x43, 0x94,
	0x3a, 0x67, 0xa4, 0x26, 0x67, 0x0b, 0x79, 0x70, 0x09, 0x62, 0x98, 0x21, 0x24, 0xa9, 0x87, 0xcb,
	0x4e, 0x29, 0x09, 0x3d, 0x1c, 0x56, 0x26, 0xb1, 0x81, 0x1d, 0x6c, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x36, 0x1f, 0x70, 0x39, 0xc1, 0x00, 0x00, 0x00,
}
